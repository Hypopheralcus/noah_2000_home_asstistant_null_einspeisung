- sensor:
      - name: "NOAH Ideale Wechselrichter Leistung"
        unique_id: noah_ideale_wechselrichter_leistung
        state: >
          {% set reale_solar_leistung = states('sensor.noah_2000_solar_power') | float(0) %}
          {% set max_leistung = 200 if reale_solar_leistung == 0 else 800 %}
          
          {% set verbrauch_nach_einspeisung = states('sensor.tasmota_mt175_p') | float(0) %}
          {% set solar_gesamt = states('sensor.solar_gesamtleistung') | float(0) %}
          {% set faktor = states('input_number.wechselrichter_anpassungsfaktor') | float(1.0) %}
          
          {% set gesamt_verbrauch = verbrauch_nach_einspeisung + solar_gesamt %}
          
          {% set berechnet = gesamt_verbrauch * faktor %}

          {{ [ berechnet, max_leistung ] | min | round(0) }}
        unit_of_measurement: "W"
        icon: mdi:transmission-tower

        
      - name: "NOAH Ideale Ausgangsleistung"
        unique_id: noah_ideale_ausgangsleistung
        state: >
          {% set reale_solar_leistung = states('sensor.noah_2000_solar_power') | float(0) %}
          {% set max_leistung = 200 if reale_solar_leistung == 0 else 800 %}
          
          {% set verbrauch_nach_einspeisung = states('sensor.tasmota_mt175_p') | float(0) %}
          {% set solar_gesamt = states('sensor.solar_gesamtleistung') | float(0) %}
          {% set faktor = states('input_number.noah_anpassungsfaktor') | float(1.2) %}
          
          {% set gesamt_verbrauch = verbrauch_nach_einspeisung + solar_gesamt %}
          
          {% set berechnet = gesamt_verbrauch * faktor %}

          {{ [ berechnet, max_leistung ] | min | round(0) }}
        unit_of_measurement: "W"
        icon: mdi:battery-charging

        
      - name: "NOAH Solarüberschuss"
        unique_id: noah_solarueberschuss
        state: >
          {% set verbrauch = states('sensor.tasmota_mt175_p') | float(0) %}
          {% set solar = states('sensor.noah_2000_solar_power') | float(0) %}
          {{ (solar - verbrauch) | round(0) }}
        unit_of_measurement: "W"
        icon: mdi:solar-power

# Input Helper Konfiguration (in configuration.yaml einfügen)
input_boolean:
  tagmodus:
    name: "NOAH Tagmodus aktiv"
    icon: mdi:weather-sunny
  
  nachtmodus:
    name: "NOAH Nachtmodus aktiv" 
    icon: mdi:weather-night

input_number:
  noah_anpassungsfaktor:
    name: "NOAH Anpassungsfaktor"
    min: 1.0
    max: 2.0
    step: 0.1
    initial: 1.2
    unit_of_measurement: "x"
    icon: mdi:tune

  wechselrichter_anpassungsfaktor:
    name: "Wechselrichter Anpassungsfaktor"
    min: 0.8
    max: 1.5
    step: 0.1
    initial: 1.0
    unit_of_measurement: "x"
    icon: mdi:tune

  min_batteriestand:
    name: "Minimaler Batteriestand"
    min: 10
    max: 50
    step: 5
    initial: 20
    unit_of_measurement: "%"
    icon: mdi:battery-low
  
  
  


- id: '1748811310391'
  alias: NOAH 2000 - Intelligente Nulleinspeisung
  description: >-
    Automatische Anpassung der NOAH und Wechselrichter Leistung für optimale
    Energienutzung
  triggers:
    - trigger: sun
    event: sunrise
    offset: "-00:30:00"
    id: sonnenaufgang
    - trigger: sun
    event: sunset
    offset: "00:30:00"
    id: sonnenuntergang
    - trigger: time_pattern
    seconds: /30
    id: zeitgesteuert
    - trigger: state
    entity_id:
      - sensor.tasmota_mt175_p
      - sensor.noah_2000_solar_power
    id: solar_verbrauch_geaendert
  conditions:
    - condition: template
    value_template: >-
      {{ states('sensor.tasmota_mt175_p') not in ['unknown', 'unavailable'] and
      states('sensor.noah_2000_solar_power') not in ['unknown', 'unavailable']
      }}
  actions:
    - choose:
      - conditions:
        - condition: sun
        after: sunrise
        after_offset: "-00:30:00"
        - condition: sun
        before: sunset
        before_offset: "00:30:00"
      sequence:
        - action: input_boolean.turn_on
        target:
          entity_id: input_boolean.tagmodus
        data: {}
        - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.nachtmodus
        data: {}
        - action: system_log.write
        data:
          message: >
          NOAH Tagmodus: Verbrauch={{ states('sensor.tasmota_mt175_p')
          }}W, Solar={{ states('sensor.noah_2000_solar_power') }}W,
          Überschuss={{ states('sensor.noah_solarueberschuss') }}W
          level: info
        - action: number.set_value
        target:
          entity_id: number.solar_maximale_leistung
        data:
          value: >
          {% set ziel =
          states('sensor.noah_ideale_wechselrichter_leistung') | float(0)
          %} {% set max_leistung =
          state_attr('number.solar_maximale_leistung', 'max') | float(800)
          %} {% if ziel > max_leistung %}
            {{ max_leistung }}
          {% elif ziel < 50 %}
            0
          {% else %}
            {{ ziel }}
          {% endif %}
        - choose:
          - conditions:
            - condition: template
            value_template: >
              {% set batterie = states('sensor.noah_2000_soc') |
              float(100) %} {% set min_stand =
              states('input_number.min_batteriestand') | float(20) %} {{
              batterie > min_stand }}
          sequence:
            - action: number.set_value
            target:
              entity_id: number.noah_2000_system_output_power
            data:
              value: >
              {% set ziel =
              states('sensor.noah_ideale_ausgangsleistung') | float(0)
              %} {% set max_leistung =
              state_attr('number.noah_2000_system_output_power',
              'max') | float(800) %} {% if ziel > max_leistung %}
                {{ max_leistung }}
              {% elif ziel < 50 %}
                0
              {% else %}
                {{ ziel }}
              {% endif %}
        default:
          - action: number.set_value
          target:
            entity_id: number.noah_2000_system_output_power
          data:
            value: 0
          enabled: false
          - action: number.set_value
          target:
            entity_id: number.noah_2000_discharge_limit
          data:
            value: >
            {% set min_stand = states('input_number.min_batteriestand')
            | float(20) %} {{ min_stand }}
          enabled: false
      - conditions:
        - condition: sun
        before: sunrise
        before_offset: "-00:30:00"
        - condition: sun
        after: sunrise
        after_offset: "-01:00:00"
      sequence:
        - action: input_boolean.turn_off
        target:
          entity_id: input_boolean.nachtmodus
        data: {}
        - action: number.set_value
        target:
          entity_id: number.solar_maximale_leistung
        data:
          value: 100
        - action: number.set_value
        target:
          entity_id: number.noah_2000_system_output_power
        data:
          value: 50
        enabled: false
    default:
      - action: input_boolean.turn_on
      target:
        entity_id: input_boolean.nachtmodus
      data: {}
      - action: input_boolean.turn_off
      target:
        entity_id: input_boolean.tagmodus
      data: {}
      - action: system_log.write
      data:
        message: >
        NOAH Nachtmodus: Verbrauch={{ states('sensor.tasmota_mt175_p') }}W,
        Grundlastbetrieb aktiv
        level: info
      - action: number.set_value
      target:
        entity_id: number.solar_maximale_leistung
      data:
        value: >
        {% set verbrauch = states('sensor.tasmota_mt175_p') | float(0) %} {%
        set grundlast = verbrauch * 0.8 %} {% if grundlast > 200 %}
          {{ grundlast | round(0) }}
        {% else %}
          200
        {% endif %}
      - choose:
        - conditions:
          - condition: template
          value_template: >
            {% set batterie = states('sensor.noah_2000_soc') | float(100)
            %} {{ batterie > 40 }}
        sequence:
          - action: number.set_value
          target:
            entity_id: number.noah_2000_system_output_power
          data:
            value: >
            {% set verbrauch = states('sensor.tasmota_mt175_p') |
            float(0) %} {% set nacht_leistung = verbrauch * 0.6 %} {% if
            nacht_leistung > 100 %}
              {{ nacht_leistung | round(0) }}
            {% else %}
              100
            {% endif %}
          enabled: false
      default:
        - action: number.set_value
        target:
          entity_id: number.noah_2000_system_output_power
        data:
          value: 0
        enabled: false
      - action: number.set_value
      target:
        entity_id: number.noah_2000_discharge_limit
      data:
        value: 40
      enabled: false
  mode: single
- id: '1748812110382'
  alias: NOAH 2000 - Status Überwachung
  description: Überwachung und Logging der NOAH Performance
  triggers:
  - trigger: time_pattern
    minutes: /15
  conditions: []
  actions:
  - action: system_log.write
    metadata: {}
    data:
      level: info
      message: "NOAH Status: Batterie={{ states('sensor.noah_2000_soc') }}%, \nAusgang={{
        states('number.noah_2000_system_output_power') }}W, \nSolar={{ states('sensor.noah_2000_solar_power')
        }}W, \nVerbrauch={{ states('sensor.tasmota_mt175_p') }}W, \nWechselrichter={{
        states('number.solar_maximale_leistung') }}W"
  mode: single
- id: '1748812599090'
  alias: NOAH 2000 - Batterieschutz
  description: Schutz vor Tiefentladung und Überlastung
  triggers:
  - trigger: numeric_state
    entity_id:
    - sensor.noah_2000_soc
    below: 15
    id: batterie_kritisch
  - trigger: numeric_state
    entity_id:
    - sensor.noah_2000_soc
    above: 95
    id: batterie_voll
  conditions: []
  actions:
  - choose:
    - conditions:
      - condition: trigger
        id:
        - batterie_kritisch
      sequence:
      - action: number.set_value
        metadata: {}
        data:
          value: '0'
        target:
          entity_id: number.noah_2000_system_output_power
      - action: number.set_value
        metadata: {}
        data:
          value: '50'
        target:
          entity_id: number.noah_2000_discharge_limit
      - action: persistent_notification.create
        metadata: {}
        data:
          title: ⚠️ NOAH 2000 Batterie Warnung
          message: Batteriestand kritisch niedrig ({{ states('sensor.noah_2000_soc')
            }}%). Entladung gestoppt zum Batterieschutz.
    - conditions:
      - condition: trigger
        id:
        - batterie_voll
      sequence:
      - action: persistent_notification.create
        metadata: {}
        data:
          title: "\U0001F50B NOAH 2000 Batterie Info"
          message: Batterie fast vollständig geladen ({{ states('sensor.noah_2000_soc')
            }}%). Optimaler Zeitpunkt für höheren Energieverbrauch.
  mode: single
